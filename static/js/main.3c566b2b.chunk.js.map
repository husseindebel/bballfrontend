{"version":3,"sources":["models/BBallModels.ts","components/BBallMatchCard.tsx","components/BBallSeasonMatches.tsx","services/BBallDataRetriever.ts","components/BBallMatchStats.tsx","components/BBallMatchPanel.tsx","components/PlayerStatsSection.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["MatchState","ModalState","BBallMatchCard","_ref","matchData","matchStats","react_default","a","createElement","Card","onClick","navigate","concat","matchId","className","Body","Text","matchNumber","date","homeTeam","name","matchStatus","Complete","homeTeamScore","awayTeamScore","Incomplete","awayTeam","BBallSeasonMatches","reversedMatches","seasonMatches","slice","reverse","Container","map","match","Row","key","Col","xs","BBallMatchCard_BBallMatchCard","parseBBallData","data","default","status","getTotalAveragePlayerStats","playerId","bballData","playerNumber","parseInt","totalStats","playerData","flatMap","homeTeamStats","filter","playerStats","player","number","reduce","prevStats","currentStats","fieldGoalsAttempted","totalPoints","fieldGoalsMade","threePointsAttempted","threePointsMade","freeThrowsAttempted","freeThrowsMade","assists","rebounds","steals","blocks","turnovers","foulsDrawn","foulsGiven","Object","objectSpread","getTotalPlayerStats","pointsPerGame","length","assistsPerGame","reboundsPerGame","blocksPerGame","stealsPerGame","fieldGoalPercentage","threePointPercentage","freeThrowPercentage","turnoversPerGame","BBallMatchStats","Table","responsive","striped","bordered","hover","n","toString","isNaN","toFixed","BBallMatchPanel","matchIdNumber","filteredMatch","undefined","getMatch","matchPanelTabs","label","_React$useState","React","useState","activeTab","_React$useState2","slicedToArray","state","setState","Jumbotron","Nav","variant","activeKey","onSelect","x","panel","Item","Link","eventKey","BBallMatchStats_BBallMatchStats","PlayerStatsSection","stats","stat","volume","made","attempted","formatStats","rows","BBallSeason","path","matches","BBallMatchPanelRoute","_ref2","PlayerStatsRoute","_ref3","PlayerStatsSection_PlayerStatsSection","App","es","App_BBallSeason","App_BBallMatchPanelRoute","App_PlayerStatsRoute","Boolean","window","location","hostname","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c566b2b.chunk.js","sourcesContent":["export interface Player {\n    name: string;\n    number: number;\n    team: Team;\n}\n\nexport interface Team {\n    name: string;\n    colour: string; \n    players: Player[] | undefined;\n}\n\nexport interface Match {\n    matchId: number,\n    homeTeam: Team;\n    awayTeam: Team;\n    date: string;\n    status: string;\n    matchNumber: string;\n    matchStats: MatchStats;\n}\n\nexport enum MatchState {\n    Complete,\n    Incomplete\n}\n\nexport interface CompleteMatchStats {\n    homeTeamScore: number;\n    awayTeamScore: number;\n    homeTeamStats: PlayerStats[];\n    matchStatus: MatchState.Complete;\n}\n\nexport interface PlayerStats {\n    player: Player;\n    totalPoints: number;\n    fieldGoalsAttempted: number;\n    fieldGoalsMade: number;\n    threePointsAttempted: number;\n    threePointsMade: number;\n    freeThrowsAttempted: number;\n    freeThrowsMade: number;\n    assists: number;\n    rebounds: number;\n    steals: number;\n    blocks: number;\n    turnovers: number;\n    foulsGiven: number;\n    foulsDrawn: number;\n}\n\nexport interface AveragePlayerStats {\n    player: Player;\n    pointsPerGame: number;\n    assistsPerGame: number;\n    stealsPerGame: number;\n    blocksPerGame: number;\n    reboundsPerGame: number;\n    fieldGoalsAttempted: number;\n    fieldGoalsMade: number;\n    threePointsAttempted: number;\n    threePointsMade: number;\n    fieldGoalPercentage: number;\n    threePointPercentage: number;\n    freeThrowPercentage: number;\n    freeThrowsMade: number;\n    freeThrowsAttempted: number;\n    turnoversPerGame: number;\n}\n\nexport interface IncompleteMatch {\n    matchStatus: MatchState.Incomplete;\n}\n\nexport type MatchStats = CompleteMatchStats | IncompleteMatch;\n\nexport interface BBallSeason {\n    matches: Match[]\n}","import React from 'react';\nimport { Match, CompleteMatchStats, MatchState, Player } from '../models/BBallModels';\nimport classnames from 'classnames';\nimport { BBallMatchStats } from './BBallMatchStats';\nimport { getTotalAveragePlayerStats } from '../services/BBallDataRetriever';\nimport { PlayerStatsSection } from './PlayerStatsSection';\nimport { Card, Container, Button } from 'react-bootstrap';\nimport './BBall.css';\nimport { Col } from 'react-bootstrap';\nimport { navigate } from '@reach/router';\n\ninterface Props {\n  matchData: Match;\n}\n\ninterface State {\n  expanded: boolean;\n  modalOpen: ModalState;\n  currentPlayer: Player | undefined;\n}\n\nexport enum ModalState {\n  Open, Close\n}\n\nexport const BBallMatchCard = (({ matchData }: Props) => {\n\n  const matchStats = matchData.matchStats;\n\n  return (\n    <Card onClick={() => navigate(`/match/${matchData.matchId}`)} className=\"match-card\">\n      <Card.Body className=\"text-center\">\n      <Card.Text>Match: {matchData.matchNumber} {matchData.date}</Card.Text>\n        <Card.Text>\n          <span>{matchData.homeTeam.name}</span> {matchStats.matchStatus === MatchState.Complete &&\n            <span>{matchStats.homeTeamScore} - {matchStats.awayTeamScore}</span>\n          } {matchStats.matchStatus === MatchState.Incomplete &&\n            <span>VS</span>\n          } <span>{matchData.awayTeam.name}</span>\n        </Card.Text>\n      </Card.Body>\n    </Card>\n  )\n});","import React from 'react';\nimport { Match } from '../models/BBallModels';\nimport { BBallMatchCard } from './BBallMatchCard';\nimport './BBall.css';\nimport { Container, Col, Row } from 'react-bootstrap';\n\ninterface Props {\n  seasonMatches: Match[]\n}\n\nexport function BBallSeasonMatches({ seasonMatches }: Props) {\n  const reversedMatches = seasonMatches.slice().reverse(); // mutating state\n  return (\n      <div className=\"match-season\">\n    <Container>\n        {\n          reversedMatches.map((match) => {\n            return (\n              <Row key={match.matchId}>\n                <Col></Col>\n                <Col xs={10}>\n                  <BBallMatchCard matchData={match} />\n                 </Col>\n                 <Col></Col>\n              </Row>\n              )\n            })\n          }\n      </Container>\n          </div>\n  )\n}","import { Match, MatchState, PlayerStats, CompleteMatchStats, AveragePlayerStats, MatchStats } from \"../models/BBallModels\";\nimport * as bballData from '../models/data.json';\n\n\nexport function parseBBallData(data: any): Match[] {\n    const matches: Match[] = data.default;\n    matches.map(match => {\n      match.status === \"complete\" ? match.matchStats.matchStatus = MatchState.Complete : match.matchStats.matchStatus = MatchState.Incomplete;    \n    })\n    return data.default;\n}\n\nexport function getMatch(matchId: string | undefined){\n    if (!matchId){\n        return undefined;\n    }\n    const matchIdNumber = parseInt(matchId);\n    const matchData = parseBBallData(bballData);\n    const filteredMatch = matchData.filter(match => match.matchId == matchIdNumber);\n    return filteredMatch.length === 0 ? undefined : filteredMatch[0];\n}\n\nconst getTotalPlayerStats = (matchData: MatchStats[], playerNumber: number): PlayerStats => {\n    const playerMatchData = matchData.flatMap((match) => {\n        if (match.matchStatus === MatchState.Incomplete) return [];\n        var playerMatches = match.homeTeamStats.filter((playerStats => playerStats.player.number === playerNumber));\n        return playerMatches;\n    });\n    const playerData = playerMatchData.reduce((prevStats, currentStats) => {\n        return {\n            player: prevStats.player,\n            fieldGoalsAttempted: prevStats.fieldGoalsAttempted + currentStats.fieldGoalsAttempted,\n            totalPoints: 0,\n            fieldGoalsMade: prevStats.fieldGoalsMade + currentStats.fieldGoalsMade,\n            threePointsAttempted: prevStats.threePointsAttempted + currentStats.threePointsAttempted,\n            threePointsMade: prevStats.threePointsMade + currentStats.threePointsMade,\n            freeThrowsAttempted: prevStats.freeThrowsAttempted + currentStats.freeThrowsAttempted,\n            freeThrowsMade: prevStats.freeThrowsMade + currentStats.freeThrowsMade,\n            assists: prevStats.assists + currentStats.assists,\n            rebounds: prevStats.rebounds + currentStats.rebounds,\n            steals: prevStats.steals + currentStats.steals,\n            blocks: prevStats.blocks + currentStats.blocks,\n            turnovers: prevStats.turnovers + currentStats.turnovers,\n            foulsDrawn: prevStats.foulsDrawn + currentStats.foulsDrawn,\n            foulsGiven: prevStats.foulsGiven + currentStats.foulsGiven\n        }\n    });\n    return {...playerData, totalPoints: playerData.threePointsMade*3 + (playerData.fieldGoalsMade - playerData.threePointsMade)*2 +  playerData.freeThrowsMade};\n}\n\nexport const getTotalAveragePlayerStats = (playerId: string): AveragePlayerStats => {\n    const matchData = parseBBallData(bballData);\n    const playerNumber = parseInt(playerId);\n    var completeMatches: MatchStats[] = matchData.map(match => match.matchStats).filter(match => match.matchStatus === MatchState.Complete);\n\n    var totalStats: PlayerStats = getTotalPlayerStats(completeMatches, playerNumber);\n    return {\n        player: totalStats.player,\n        pointsPerGame: totalStats.totalPoints / matchData.length,\n        assistsPerGame: totalStats.assists / matchData.length,\n        reboundsPerGame: totalStats.rebounds / matchData.length,\n        blocksPerGame: totalStats.blocks / matchData.length,\n        stealsPerGame: totalStats.steals / matchData.length,\n        fieldGoalPercentage: totalStats.fieldGoalsMade / totalStats.fieldGoalsAttempted,\n        threePointPercentage: totalStats.threePointsMade / totalStats.threePointsAttempted,\n        freeThrowPercentage: totalStats.freeThrowsMade / totalStats.freeThrowsAttempted,\n        fieldGoalsAttempted: totalStats.fieldGoalsAttempted,\n        fieldGoalsMade: totalStats.fieldGoalsMade,\n        threePointsAttempted: totalStats.threePointsAttempted,\n        threePointsMade: totalStats.threePointsMade,\n        freeThrowsMade: totalStats.freeThrowsMade,\n        freeThrowsAttempted: totalStats.freeThrowsAttempted,\n        turnoversPerGame: totalStats.turnovers / matchData.length\n    }\n}\n","import React from 'react';\nimport { Match, CompleteMatchStats, Player } from '../models/BBallModels';\nimport { getTotalAveragePlayerStats } from '../services/BBallDataRetriever';\nimport { ModalState } from './BBallMatchCard';\nimport { Table, Button } from 'react-bootstrap';\nimport { navigate } from '@reach/router';\n\ninterface Props {\n  matchStats: CompleteMatchStats;\n  // handleModalAction: (modalState: ModalState, player: Player) => void;\n}\n\n/*\n  PTS\n  REB\n  AST\n  STL\n  BLK\n  FGM\n  FGA\n  FG%\n  3PM\n  3PA\n  3P%\n  FTM\n  FTMA\n  FT%\n  TOV\n*/\n\nexport const BBallMatchStats =(({ matchStats }: Props) => {\n  \n  return (\n    <div className=\"match-table\">\n      <Table responsive striped bordered hover>\n        <thead>\n          <tr>\n            <th>Player Name</th>\n            <th>PTS</th>\n            <th>REB</th>\n            <th>AST</th>\n            <th>STL</th>\n            <th>BLK</th>\n            <th>FGM</th>\n            <th>FGA</th>\n            <th>FG%</th>\n            <th>3PM</th>\n            <th>3PA</th>\n            <th>3P%</th>\n            <th>FTM</th>\n            <th>FTA</th>\n            <th>FT%</th>\n            <th>TOV</th>\n            <th>PF</th>\n          </tr>\n        </thead>\n        <tbody>\n          {matchStats.homeTeamStats.map(n => {\n            return (\n              <tr onClick={() => navigate(`/player/${n.player.number.toString()}`)} key={n.player.number}>\n                <td>\n                {n.player.name}\n                </td>\n                <td>{n.threePointsMade*3 + (n.fieldGoalsMade - n.threePointsMade)*2 +  n.freeThrowsMade}</td>\n                <td>{n.rebounds}</td>\n                <td>{n.assists}</td>\n                <td>{n.steals}</td>\n                <td>{n.blocks}</td>\n                <td>{n.fieldGoalsMade}</td>\n                <td>{n.fieldGoalsAttempted}</td>\n                <td>{\n                  isNaN(n.fieldGoalsMade/n.fieldGoalsAttempted) ? 0 : \n                  ((n.fieldGoalsMade/n.fieldGoalsAttempted)*100).toFixed(2)}</td>\n                <td>{n.threePointsMade}</td>\n                <td>{n.threePointsAttempted}</td>\n                <td>{\n                  isNaN(n.threePointsMade/n.threePointsAttempted) ? 0 : \n                  ((n.threePointsMade/n.threePointsAttempted)*100).toFixed(2)}</td>\n                <td>{n.freeThrowsMade}</td>\n                <td>{n.freeThrowsAttempted}</td>\n                <td>{\n                  isNaN(n.freeThrowsMade/n.freeThrowsAttempted) ? 0 : \n                  ((n.freeThrowsMade/n.freeThrowsAttempted)*100).toFixed(2)}</td>\n                <td>{n.turnovers}</td>\n                <td>{n.foulsGiven}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n      </div>\n    )\n});","import React from 'react';\r\nimport './BBall.css';\r\nimport { Match } from '@reach/router';\r\nimport { MatchStats, MatchState } from '../models/BBallModels';\r\nimport { getMatch } from '../services/BBallDataRetriever';\r\nimport { Jumbotron, Button, Container, Col } from 'react-bootstrap';\r\nimport { Nav } from 'react-bootstrap';\r\nimport { BBallMatchStats } from './BBallMatchStats';\r\n\r\ninterface Props {\r\n    matchId: string | undefined;\r\n}\r\n\r\ninterface MatchPanelTab {\r\n    key: string;\r\n    name: string;\r\n    label: string;\r\n}\r\n\r\ninterface State {\r\n    activeTab: MatchPanelTab;\r\n}\r\n\r\nexport function BBallMatchPanel({ matchId }: Props) {\r\n    const matchData = getMatch(matchId);\r\n\r\n    const matchPanelTabs: MatchPanelTab[] = [\r\n        {\r\n            key: \"1\",\r\n            name: \"match-stats\",\r\n            label: \"Match Stats\"\r\n        },\r\n        {\r\n            key: \"2\",\r\n            name: \"player-stats\",\r\n            label: \"Player Stats\"\r\n        },\r\n        {\r\n            key: \"3\",\r\n            name: \"video\",\r\n            label: \"Video\"\r\n        }\r\n    ];\r\n\r\n    const [state, setState] = React.useState({activeTab: matchPanelTabs[1]});\r\n\r\n\r\n    return (\r\n        <div className=\"match-panel\">\r\n         {matchData &&\r\n         <div>\r\n            <Jumbotron className=\"text-center\">\r\n                <span>{matchData.homeTeam.name}</span> {matchData.matchStats.matchStatus === MatchState.Complete &&\r\n                    <span>{matchData.matchStats.homeTeamScore} - {matchData.matchStats.awayTeamScore}</span>\r\n                } {matchData.matchStats.matchStatus === MatchState.Incomplete &&\r\n                    <span>VS</span>\r\n                } <span>{matchData.awayTeam.name}</span>\r\n            </Jumbotron>                \r\n            <Nav variant=\"pills\" activeKey={state.activeTab.key} onSelect={(key: string) => setState({activeTab: matchPanelTabs.filter(x => x.key === key)[0]})}>\r\n                {matchPanelTabs.map(panel => (\r\n                    <Nav.Item key={panel.key}>\r\n                        <Nav.Link eventKey={panel.key}>\r\n                            {panel.label}\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                ))}\r\n            </Nav>\r\n            <Container>\r\n            <Col></Col>\r\n            <Col>\r\n            {state.activeTab.name === \"match-stats\" &&\r\n                <span>Match Stats</span>\r\n            }            \r\n            {state.activeTab.name === \"player-stats\" &&\r\n                matchData.matchStats.matchStatus === MatchState.Complete &&\r\n                <BBallMatchStats matchStats={matchData.matchStats} />\r\n            }\r\n            </Col>\r\n            <Col></Col>\r\n            </Container>\r\n        </div>\r\n         }   \r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport { Player, PlayerStats } from '../models/BBallModels';\nimport { ModalState } from './BBallMatchCard';\nimport { getTotalAveragePlayerStats } from '../services/BBallDataRetriever';\nimport { Jumbotron, Button, Container, Col } from 'react-bootstrap';\nimport { Row } from 'react-bootstrap';\nimport './BBall.css';\n\ninterface Props {\n  playerId?: string;\n}\n\ninterface Volume {\n  made: string;\n  attempted: string;\n}\n\ninterface SummaryStats {\n  stat: string;\n  label: string;\n  volume?: Volume;\n}\n\ninterface FormattedPlayerStats {\n  number: string;\n  name: string;\n  stats: SummaryStats[];\n}\n\nconst formatStats = (playerId: string): FormattedPlayerStats => {\n  const playerStats = getTotalAveragePlayerStats(playerId);\n  return {\n      number: playerStats.player.number.toString(),\n      name: playerStats.player.name,\n      stats: [\n        {\n          stat: playerStats.pointsPerGame.toFixed(3),\n          label: \"PPG\",\n        },\n        {\n          stat: playerStats.assistsPerGame.toFixed(3),\n          label: \"APG\",\n        },\n        {\n          stat: playerStats.reboundsPerGame.toFixed(3),\n          label: \"RPG\",\n        },\n        {\n          stat: playerStats.fieldGoalPercentage.toFixed(3),\n          volume:{\n            made: playerStats.fieldGoalsMade.toString(),\n            attempted: playerStats.fieldGoalsAttempted.toString()\n          },\n          label: \"FG%\",\n        },\n        {\n          stat: playerStats.threePointPercentage.toFixed(3),\n          label: \"3PT%\",\n          volume: {\n            made: playerStats.threePointsMade.toString(),\n            attempted: playerStats.threePointsAttempted.toString()\n          }\n        },\n        {\n          stat: playerStats.freeThrowPercentage.toFixed(3),\n          label: \"FT%\",\n          volume: {\n            made: playerStats.freeThrowsMade.toString(),\n            attempted: playerStats.freeThrowsAttempted.toString()\n          }\n        },\n        {\n          stat: playerStats.stealsPerGame.toFixed(3),\n          label: \"SPG\",\n        },\n        {\n          stat: playerStats.blocksPerGame.toFixed(3),\n          label: \"BPG\",\n        },\n        {\n          stat: playerStats.turnoversPerGame.toFixed(3),\n          label: \"TOV\",\n        },\n      ] \n    }\n  }\n\nexport const PlayerStatsSection = (({ playerId }: Props) => {\n    if (!playerId){\n      return null;\n    }\n    const playerStats = formatStats(playerId);\n    const firstRow = playerStats.stats.filter(stats => stats.label === \"APG\" || stats.label === \"PPG\" || stats.label === \"RPG\");\n    const secondRow = playerStats.stats.filter(stats => stats.label === \"FG%\" || stats.label === \"3PT%\" || stats.label === \"FT%\");\n    const thirdRow = playerStats.stats.filter(stats => stats.label === \"SPG\" || stats.label === \"BPG\" || stats.label === \"TOV\");\n    const rows = [firstRow, secondRow, thirdRow];\n    return (  \n      <div>\n\n    <Jumbotron>\n      <h1>#{playerStats.number}. {playerStats.name}</h1>\n    </Jumbotron>\n    <Container>\n      {rows && rows.map(rows => (\n        <div className=\"player-score\">\n        <Row>\n          {rows && rows.map(stat => (\n            <Col>\n              <h2>{stat.stat}</h2>\n              {stat.volume && <h5>({stat.volume.made}/{stat.volume.attempted})</h5>}\n              {stat.label}\n            </Col>\n          ))}\n        </Row>\n        </div>\n      ))}\n    </Container>\n      </div>     \n    );\n});\n","import React, { Component } from 'react';\n// import './BBallSeason.css';\nimport * as bballData from '../models/data.json';\nimport { BBallSeasonMatches } from './BBallSeasonMatches';\nimport { parseBBallData } from '../services/BBallDataRetriever';\nimport { Router } from '@reach/router';\nimport { BBallMatchPanel } from './BBallMatchPanel';\nimport { PlayerStatsSection } from './PlayerStatsSection';\n\ninterface RouteProps {\n  path: string;\n  matchId?: string;\n  playerId?: string;\n}\n\nconst BBallSeason = ({path} : RouteProps) => {\n  const matches = parseBBallData(bballData);\n  return(\n    <BBallSeasonMatches seasonMatches={matches} />\n  );\n}\n\nconst BBallMatchPanelRoute = ({path, matchId}: RouteProps) => {\n  return <BBallMatchPanel matchId={matchId}/>\n}\n\nconst PlayerStatsRoute = ({path, playerId}: RouteProps) => {\n  return <PlayerStatsSection playerId={playerId} />\n}\n\nconst App = () => (\n  <Router>\n    <BBallSeason path=\"/\" />\n    <BBallMatchPanelRoute path=\"/match/:matchId\" />\n    <PlayerStatsRoute path=\"/player/:playerId\" />\n  </Router>\n);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}