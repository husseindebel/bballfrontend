{"version":3,"sources":["models/BBallModels.ts","components/BBallMatchCard.tsx","components/BBallSeasonMatches.tsx","services/BBallDataRetriever.ts","components/BBallMatchStats.tsx","components/MatchVideo.tsx","components/BBallTeamStats.tsx","components/BBallMatchPanel.tsx","components/PlayerStatsSection.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["MatchState","ModalState","BBallMatchCard","_ref","matchData","matchStats","react_default","a","createElement","Card","onClick","navigate","concat","matchId","className","Body","Text","matchNumber","date","homeTeam","name","matchStatus","Complete","homeTeamScore","awayTeamScore","Incomplete","awayTeam","Button","variant","BBallSeasonMatches","reversedMatches","seasonMatches","slice","reverse","Jumbotron","Container","map","match","Row","key","Col","xs","BBallMatchCard_BBallMatchCard","parseBBallData","data","seasonId","rawMatches","default","status","undefined","filter","getTopPlayerMatchStats","homeTeamStats","playerStat","playerName","player","label","total","threePointsMade","fieldGoalsMade","freeThrowsMade","sort","b","assists","rebounds","steals","getTotalTeamStats","playerStats","totalFieldGoalsAttempted","fieldGoalsAttempted","totalFieldGoalsMade","totalThreePointsAttempted","threePointsAttempted","totalThreePointsMade","totalFreeThrowsAttempted","freeThrowsAttempted","totalFreeThrowsMade","reduce","prev","current","getTotalAveragePlayerStats","playerId","bballData","playerNumber","parseInt","totalStats","playerMatchData","flatMap","number","played","playerData","prevStats","currentStats","matchesPlayed","length","totalPoints","blocks","turnovers","foulsDrawn","foulsGiven","Object","objectSpread","getTotalPlayerStats","gamesPlayed","pointsPerGame","assistsPerGame","reboundsPerGame","blocksPerGame","stealsPerGame","fieldGoalPercentage","threePointPercentage","freeThrowPercentage","turnoversPerGame","BBallMatchStats","Table","responsive","striped","bordered","hover","n","toString","style","color","isNaN","toFixed","MatchVideo","ReactPlayer_default","url","BBallTeamStats","teamStats","topKeyPlayerStat","BBallMatchPanel","matchIdNumber","filteredMatch","getMatch","matchPanelTabs","_React$useState","React","useState","activeTab","_React$useState2","slicedToArray","state","setState","Nav","activeKey","onSelect","x","panel","Item","Link","eventKey","BBallMatchStats_BBallMatchStats","seasons","currentSeason","PlayerStatsSection","_useState","_useState2","setSeason","season","stats","stat","volume","made","attempted","formatStats","rows","Fragment","DropdownButton","id","title","Dropdown","changeSeason","index","BBallSeason","path","matches","BBallMatchPanelRoute","_ref2","PlayerStatsRoute","_ref3","PlayerStatsSection_PlayerStatsSection","App","es","basepath","App_BBallSeason","App_BBallMatchPanelRoute","App_PlayerStatsRoute","Boolean","window","location","hostname","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.817dc234.chunk.js","sourcesContent":["export interface Player {\n    name: string;\n    number: number;\n    team: Team;\n}\n\nexport interface Team {\n    name: string;\n    colour: string; \n    players: Player[] | undefined;\n}\n\nexport interface Match {\n    matchId: number;\n    seasonId: number;\n    homeTeam: Team;\n    awayTeam: Team;\n    date: string;\n    status: string;\n    matchNumber: string;\n    matchStats: MatchStats;\n}\n\nexport enum MatchState {\n    Complete,\n    Incomplete\n}\n\nexport interface CompleteMatchStats {\n    homeTeamScore: number;\n    awayTeamScore: number;\n    homeTeamStats: PlayerStats[];\n    matchStatus: MatchState.Complete;\n}\n\nexport interface PlayerStats {\n    matchesPlayed: number;\n    player: Player;\n    totalPoints: number;\n    fieldGoalsAttempted: number;\n    fieldGoalsMade: number;\n    threePointsAttempted: number;\n    threePointsMade: number;\n    freeThrowsAttempted: number;\n    freeThrowsMade: number;\n    assists: number;\n    rebounds: number;\n    steals: number;\n    blocks: number;\n    turnovers: number;\n    foulsGiven: number;\n    foulsDrawn: number;\n    played?: boolean;\n}\n\nexport interface AveragePlayerStats {\n    player: Player;\n    gamesPlayed: number;\n    pointsPerGame: number;\n    assistsPerGame: number;\n    stealsPerGame: number;\n    blocksPerGame: number;\n    reboundsPerGame: number;\n    fieldGoalsAttempted: number;\n    fieldGoalsMade: number;\n    threePointsAttempted: number;\n    threePointsMade: number;\n    fieldGoalPercentage: number;\n    threePointPercentage: number;\n    freeThrowPercentage: number;\n    freeThrowsMade: number;\n    freeThrowsAttempted: number;\n    turnoversPerGame: number;\n}\n\nexport interface IncompleteMatch {\n    matchStatus: MatchState.Incomplete;\n}\n\nexport type MatchStats = CompleteMatchStats | IncompleteMatch;\n\nexport interface BBallSeason {\n    matches: Match[]\n}","import React from 'react';\nimport { Match, CompleteMatchStats, MatchState, Player } from '../models/BBallModels';\nimport classnames from 'classnames';\nimport { BBallMatchStats } from './BBallMatchStats';\nimport { getTotalAveragePlayerStats } from '../services/BBallDataRetriever';\nimport { PlayerStatsSection } from './PlayerStatsSection';\nimport { Card, Container, Button } from 'react-bootstrap';\nimport './BBall.css';\nimport { Col } from 'react-bootstrap';\nimport { navigate } from '@reach/router';\n\ninterface Props {\n  matchData: Match;\n}\n\ninterface State {\n  expanded: boolean;\n  modalOpen: ModalState;\n  currentPlayer: Player | undefined;\n}\n\nexport enum ModalState {\n  Open, Close\n}\n\nexport const BBallMatchCard = (({ matchData }: Props) => {\n\n  const matchStats = matchData.matchStats;\n\n  return (\n    <Card onClick={() => navigate(`/bballfrontend/match/${matchData.matchId}`)} className=\"match-card\">\n      <Card.Body className=\"text-center\">\n      <Card.Text>Match: {matchData.matchNumber} {matchData.date}</Card.Text>\n        <Card.Text>\n          <span>{matchData.homeTeam.name}</span> {matchStats.matchStatus === MatchState.Complete &&\n            <span>{matchStats.homeTeamScore} - {matchStats.awayTeamScore}</span>\n          } {matchStats.matchStatus === MatchState.Incomplete &&\n            <span>VS</span>\n          } <span>{matchData.awayTeam.name}</span>\n        </Card.Text>\n        <Button variant=\"outline-secondary\">More</Button>\n      </Card.Body>\n    </Card>\n  )\n});","import React from 'react';\nimport { Match } from '../models/BBallModels';\nimport { BBallMatchCard } from './BBallMatchCard';\nimport './BBall.css';\nimport { Container, Col, Row, Jumbotron } from 'react-bootstrap';\n\ninterface Props {\n  seasonMatches: Match[]\n}\n\nexport function BBallSeasonMatches({ seasonMatches }: Props) {\n  const reversedMatches = seasonMatches.slice().reverse(); // mutating state\n  return (\n    <div>\n    <Jumbotron><h1>Pilot's Games</h1></Jumbotron>\n    <div className=\"match-season\">\n      <Container>\n        {reversedMatches.map((match) => {\n          return (\n            <Row key={match.matchId}>\n              <Col></Col>\n              <Col xs={10}>\n                <BBallMatchCard matchData={match} />\n                </Col>\n                <Col></Col>\n            </Row>\n          )\n        })}\n      </Container>\n      </div>\n        </div>\n  )\n}","import { Match, MatchState, PlayerStats, CompleteMatchStats, AveragePlayerStats, MatchStats } from \"../models/BBallModels\";\nimport * as bballData from '../models/data.json';\n\nexport function parseBBallData(data: any, seasonId?: number): Match[] {\n    const rawMatches: Match[] = data.default;\n\n    // im sorry\n    rawMatches.map(match => {\n      match.status === \"complete\" \n        ? match.matchStats.matchStatus = MatchState.Complete : match.matchStats.matchStatus = MatchState.Incomplete;    \n    });\n\n    if (seasonId != undefined){\n        return rawMatches.filter(match => match.seasonId === seasonId);\n    }\n\n    return rawMatches;\n}\n\nexport function getMatch(matchId: string | undefined){\n    if (!matchId){\n        return undefined;\n    }\n    const matchIdNumber = parseInt(matchId);\n    const matchData = parseBBallData(bballData);\n    const filteredMatch = matchData.filter(match => match.matchId == matchIdNumber);\n    return filteredMatch.length === 0 ? undefined : filteredMatch[0];\n}\n\nexport interface TeamTotalStats {\n    totalFieldGoalsAttempted: number;\n    totalFieldGoalsMade: number;\n    totalThreePointsAttempted: number;\n    totalThreePointsMade: number;\n    totalFreeThrowsAttempted: number;\n    totalFreeThrowsMade: number;\n}\n\n\nexport interface KeyPlayerStat {\n    playerName: string;\n    label: string;\n    total: number;    \n}\n\nexport const getTopPlayerMatchStats = (matchData: CompleteMatchStats): KeyPlayerStat[] => {\n    const topPoints:KeyPlayerStat = matchData.homeTeamStats.map(playerStat => {\n        return {\n            playerName: playerStat.player.name,\n            label: \"Points\",\n            total: playerStat.threePointsMade*3 + (playerStat.fieldGoalsMade - playerStat.threePointsMade)*2 +  playerStat.freeThrowsMade\n        }\n    }).sort((a, b) => b.total - a.total)[0];\n    \n    const topAssists:KeyPlayerStat = matchData.homeTeamStats\n        .map(playerStat => { return {playerName: playerStat.player.name, label: \"Assists\", total: playerStat.assists}})\n        .sort((a, b) => b.total - a.total)[0];\n\n    const topRebounds = matchData.homeTeamStats\n        .map(playerStat => { return {playerName: playerStat.player.name, label: \"Rebounds\", total: playerStat.rebounds}})\n        .sort((a, b) => b.total - a.total)[0];\n\n    const topSteals = matchData.homeTeamStats\n        .map(playerStat => { return {playerName: playerStat.player.name, label: \"Steals\", total: playerStat.steals}})\n        .sort((a, b) => b.total - a.total)[0];    \n\n    return [topPoints, topAssists, topRebounds, topSteals];\n}\n\nexport const getTotalTeamStats = (matchData: CompleteMatchStats): TeamTotalStats => {\n    const teamStats:TeamTotalStats = matchData.homeTeamStats\n        .map(playerStats => {\n            return {\n                totalFieldGoalsAttempted: playerStats.fieldGoalsAttempted,\n                totalFieldGoalsMade: playerStats.fieldGoalsMade,\n                totalThreePointsAttempted: playerStats.threePointsAttempted,\n                totalThreePointsMade: playerStats.threePointsMade,\n                totalFreeThrowsAttempted: playerStats.freeThrowsAttempted,\n                totalFreeThrowsMade: playerStats.freeThrowsMade\n            }\n        }).reduce((prev, current) => {\n            return {\n                totalFieldGoalsAttempted: prev.totalFieldGoalsAttempted + current.totalFieldGoalsAttempted,\n                totalFieldGoalsMade: prev.totalFieldGoalsMade + current.totalFieldGoalsMade,\n                totalThreePointsAttempted: prev.totalThreePointsAttempted + current.totalThreePointsAttempted,\n                totalThreePointsMade: prev.totalThreePointsMade + current.totalThreePointsMade,\n                totalFreeThrowsAttempted: prev.totalFreeThrowsAttempted + current.totalFreeThrowsAttempted,\n                totalFreeThrowsMade: prev.totalFreeThrowsMade + current.totalFreeThrowsMade,\n            }\n        });\n\n    return teamStats;\n}\n\nconst getTotalPlayerStats = (matchData: MatchStats[], playerNumber: number): PlayerStats => {\n    const playerMatchData = matchData.flatMap((match) => {\n        if (match.matchStatus === MatchState.Incomplete) return [];\n        var playerMatches = match.homeTeamStats\n            .filter((playerStats => playerStats.player.number === playerNumber && playerStats.played === undefined));\n        return playerMatches;\n    });\n\n    const playerData: PlayerStats = playerMatchData.reduce((prevStats, currentStats) => {\n        return {\n            matchesPlayed: playerMatchData.length,\n            player: prevStats.player,\n            fieldGoalsAttempted: prevStats.fieldGoalsAttempted + currentStats.fieldGoalsAttempted,\n            totalPoints: 0,\n            fieldGoalsMade: prevStats.fieldGoalsMade + currentStats.fieldGoalsMade,\n            threePointsAttempted: prevStats.threePointsAttempted + currentStats.threePointsAttempted,\n            threePointsMade: prevStats.threePointsMade + currentStats.threePointsMade,\n            freeThrowsAttempted: prevStats.freeThrowsAttempted + currentStats.freeThrowsAttempted,\n            freeThrowsMade: prevStats.freeThrowsMade + currentStats.freeThrowsMade,\n            assists: prevStats.assists + currentStats.assists,\n            rebounds: prevStats.rebounds + currentStats.rebounds,\n            steals: prevStats.steals + currentStats.steals,\n            blocks: prevStats.blocks + currentStats.blocks,\n            turnovers: prevStats.turnovers + currentStats.turnovers,\n            foulsDrawn: prevStats.foulsDrawn + currentStats.foulsDrawn,\n            foulsGiven: prevStats.foulsGiven + currentStats.foulsGiven\n        }\n    });\n    return {...playerData, totalPoints: playerData.threePointsMade*3 + (playerData.fieldGoalsMade - playerData.threePointsMade)*2 +  playerData.freeThrowsMade};\n}\n\nexport const getTotalAveragePlayerStats = (playerId: string, seasonId?: number): AveragePlayerStats => {\n    const matchData = parseBBallData(bballData, seasonId);\n    const playerNumber = parseInt(playerId);\n    const completeMatches: MatchStats[] = matchData\n        .map(match => match.matchStats)\n        .filter(match => match.matchStatus === MatchState.Complete);\n\n    var totalStats: PlayerStats = getTotalPlayerStats(completeMatches, playerNumber);\n    return {\n        player: totalStats.player,\n        gamesPlayed: totalStats.matchesPlayed,\n        pointsPerGame: totalStats.totalPoints / totalStats.matchesPlayed,\n        assistsPerGame: totalStats.assists / totalStats.matchesPlayed,\n        reboundsPerGame: totalStats.rebounds / totalStats.matchesPlayed,\n        blocksPerGame: totalStats.blocks / totalStats.matchesPlayed,\n        stealsPerGame: totalStats.steals / totalStats.matchesPlayed,\n        fieldGoalPercentage: totalStats.fieldGoalsMade / totalStats.fieldGoalsAttempted,\n        threePointPercentage: totalStats.threePointsMade / totalStats.threePointsAttempted,\n        freeThrowPercentage: totalStats.freeThrowsMade / totalStats.freeThrowsAttempted,\n        fieldGoalsAttempted: totalStats.fieldGoalsAttempted,\n        fieldGoalsMade: totalStats.fieldGoalsMade,\n        threePointsAttempted: totalStats.threePointsAttempted,\n        threePointsMade: totalStats.threePointsMade,\n        freeThrowsMade: totalStats.freeThrowsMade,\n        freeThrowsAttempted: totalStats.freeThrowsAttempted,\n        turnoversPerGame: totalStats.turnovers / totalStats.matchesPlayed\n    }\n}\n","import React from 'react';\nimport { Match, CompleteMatchStats, Player } from '../models/BBallModels';\nimport { getTotalAveragePlayerStats } from '../services/BBallDataRetriever';\nimport { ModalState } from './BBallMatchCard';\nimport { Table, Button } from 'react-bootstrap';\nimport { navigate } from '@reach/router';\n\ninterface Props {\n  matchStats: CompleteMatchStats;\n  // handleModalAction: (modalState: ModalState, player: Player) => void;\n}\n\n/*\n  PTS\n  REB\n  AST\n  STL\n  BLK\n  FGM\n  FGA\n  FG%\n  3PM\n  3PA\n  3P%\n  FTM\n  FTMA\n  FT%\n  TOV\n*/\n\nexport const BBallMatchStats =(({ matchStats }: Props) => {\n  \n  return (\n    <div className=\"match-table\">\n      <Table responsive striped bordered hover>\n        <thead>\n          <tr>\n            <th>Player Name</th>\n            <th>PTS</th>\n            <th>REB</th>\n            <th>AST</th>\n            <th>STL</th>\n            <th>BLK</th>\n            <th>FGM</th>\n            <th>FGA</th>\n            <th>FG%</th>\n            <th>3PM</th>\n            <th>3PA</th>\n            <th>3P%</th>\n            <th>FTM</th>\n            <th>FTA</th>\n            <th>FT%</th>\n            <th>TOV</th>\n            <th>PF</th>\n          </tr>\n        </thead>\n        <tbody>\n          {matchStats.homeTeamStats.map(n => {\n            return (\n              <tr onClick={() => navigate(`/bballfrontend/player/${n.player.number.toString()}`)} key={n.player.number}>\n                <td>\n                <div style={{color: 'blue'}}>{n.player.number}. {n.player.name}</div>\n                </td>\n                <td>{n.threePointsMade*3 + (n.fieldGoalsMade - n.threePointsMade)*2 +  n.freeThrowsMade}</td>\n                <td>{n.rebounds}</td>\n                <td>{n.assists}</td>\n                <td>{n.steals}</td>\n                <td>{n.blocks}</td>\n                <td>{n.fieldGoalsMade}</td>\n                <td>{n.fieldGoalsAttempted}</td>\n                <td>{\n                  isNaN(n.fieldGoalsMade/n.fieldGoalsAttempted) ? 0 : \n                  ((n.fieldGoalsMade/n.fieldGoalsAttempted)*100).toFixed(2)}</td>\n                <td>{n.threePointsMade}</td>\n                <td>{n.threePointsAttempted}</td>\n                <td>{\n                  isNaN(n.threePointsMade/n.threePointsAttempted) ? 0 : \n                  ((n.threePointsMade/n.threePointsAttempted)*100).toFixed(2)}</td>\n                <td>{n.freeThrowsMade}</td>\n                <td>{n.freeThrowsAttempted}</td>\n                <td>{\n                  isNaN(n.freeThrowsMade/n.freeThrowsAttempted) ? 0 : \n                  ((n.freeThrowsMade/n.freeThrowsAttempted)*100).toFixed(2)}</td>\n                <td>{n.turnovers}</td>\n                <td>{n.foulsGiven}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n      </div>\n    )\n});","import React from 'react';\nimport ReactPlayer from 'react-player';\nexport interface Props {\n  matchId: string | undefined;\n}\n\nexport function MatchVideo({ matchId }: Props) {\n  return (\n    <ReactPlayer \n      url={\"https://www.youtube.com/watch?v=GDJsXJICaa8\"} />\n  )\n}","import React from 'react';\r\nimport { CompleteMatchStats } from '../models/BBallModels';\r\nimport './BBall.css';\r\nimport { getTotalTeamStats, getTopPlayerMatchStats } from '../services/BBallDataRetriever';\r\n\r\ninterface Props {\r\n  matchStats: CompleteMatchStats;\r\n}\r\n\r\nexport function BBallTeamStats({ matchStats }: Props) {\r\n  const teamStats = getTotalTeamStats(matchStats);\r\n  const topKeyPlayerStat = getTopPlayerMatchStats(matchStats);\r\n\r\n  return (\r\n    <div className=\"team-stats\">\r\n      {topKeyPlayerStat.map(player => {\r\n        return (\r\n          <div key={player.label}>\r\n          <h6>Top {player.label}:</h6> {player.playerName} {player.total}\r\n          </div>\r\n        )\r\n      })}\r\n      <h3>Team Stats:</h3>\r\n      FGA: {teamStats.totalFieldGoalsAttempted} <br/>\r\n      FGM: {teamStats.totalFieldGoalsMade} <br/>\r\n      FG%: {(teamStats.totalFieldGoalsMade/teamStats.totalFieldGoalsAttempted*100).toFixed(2)} <br/>\r\n      3PA: {teamStats.totalThreePointsAttempted} <br/>\r\n      3PM: {teamStats.totalThreePointsMade} <br/>\r\n      3P%: {(teamStats.totalThreePointsMade/teamStats.totalThreePointsAttempted*100).toFixed(2)} <br/>\r\n      FTA: {teamStats.totalFreeThrowsAttempted} <br/>\r\n      FTM: {teamStats.totalFreeThrowsMade} <br/>\r\n    </div>\r\n  );\r\n}","import React from 'react';\nimport './BBall.css';\nimport { Match, navigate } from '@reach/router';\nimport { MatchStats, MatchState } from '../models/BBallModels';\nimport { getMatch } from '../services/BBallDataRetriever';\nimport { Jumbotron, Button, Container, Col } from 'react-bootstrap';\nimport { Nav } from 'react-bootstrap';\nimport { BBallMatchStats } from './BBallMatchStats';\nimport { MatchVideo } from './MatchVideo';\nimport { BBallTeamStats } from './BBallTeamStats';\n\ninterface Props {\n  matchId: string | undefined;\n}\n\ninterface MatchPanelTab {\n  key: string;\n  name: string;\n  label: string;\n}\n\ninterface State {\n  activeTab: MatchPanelTab;\n}\n\nexport function BBallMatchPanel({ matchId }: Props) {\n  const matchData = getMatch(matchId);\n\n  const matchPanelTabs: MatchPanelTab[] = [\n    {\n      key: \"1\",\n      name: \"match-stats\",\n      label: \"Match Stats\"\n    },\n    {\n      key: \"2\",\n      name: \"player-stats\",\n      label: \"Player Stats\"\n    },\n    {\n      key: \"3\",\n      name: \"video\",\n      label: \"Video\"\n    }\n  ];\n\n  const [state, setState] = React.useState({ activeTab: matchPanelTabs[0] });\n\n\n  return (\n    <div className=\"match-panel\">\n      {matchData &&\n        <div>\n          <Jumbotron className=\"text-center\">\n            <span>{matchData.homeTeam.name}</span> {matchData.matchStats.matchStatus === MatchState.Complete &&\n              <span>{matchData.matchStats.homeTeamScore} - {matchData.matchStats.awayTeamScore}</span>\n            } {matchData.matchStats.matchStatus === MatchState.Incomplete &&\n              <span>VS</span>\n            } <span>{matchData.awayTeam.name}</span>\n          </Jumbotron>\n          <Nav variant=\"pills\" activeKey={state.activeTab.key} onSelect={(key: string) => setState({ activeTab: matchPanelTabs.filter(x => x.key === key)[0] })}>\n            {matchPanelTabs.map(panel => (\n              <Nav.Item key={panel.key}>\n                <Nav.Link eventKey={panel.key}>\n                  {panel.label}\n                </Nav.Link>\n              </Nav.Item>\n            ))}\n          </Nav>\n          <Container>\n            <Col></Col>\n            <Col>\n              {state.activeTab.name === \"match-stats\" &&\n                matchData.matchStats.matchStatus === MatchState.Complete &&\n                <BBallTeamStats matchStats={matchData.matchStats} />\n              }\n              {state.activeTab.name === \"player-stats\" &&\n                matchData.matchStats.matchStatus === MatchState.Complete &&\n                <BBallMatchStats matchStats={matchData.matchStats} />\n              }\n              {state.activeTab.name === 'video' &&\n                <MatchVideo matchId={matchId} />\n              }\n            </Col>\n            <Col></Col>\n          </Container>\n        </div>\n      }\n    </div>\n  );\n}","import React, { useState } from 'react';\nimport { Player, PlayerStats } from '../models/BBallModels';\nimport { ModalState } from './BBallMatchCard';\nimport { getTotalAveragePlayerStats } from '../services/BBallDataRetriever';\nimport { Jumbotron, Button, Container, Col, Dropdown } from 'react-bootstrap';\nimport { Row } from 'react-bootstrap';\nimport './BBall.css';\nimport { DropdownButton } from 'react-bootstrap';\n\ninterface Props {\n  playerId?: string;\n}\n\ninterface Volume {\n  made: string;\n  attempted: string;\n}\n\ninterface SummaryStats {\n  stat: string;\n  label: string;\n  volume?: Volume;\n}\n\ninterface FormattedPlayerStats {\n  number: string;\n  name: string;\n  stats: SummaryStats[];\n  gamesPlayed: string;\n}\n\ninterface LeagueSeasons {\n  seasonId: number | undefined;\n  label: string;\n  currentSeason?: boolean\n}\n\nconst formatStats = (playerId: string, season: LeagueSeasons): FormattedPlayerStats => {\n  const playerStats = getTotalAveragePlayerStats(playerId, season.seasonId);\n  return {\n      number: playerStats.player.number.toString(),\n      name: playerStats.player.name,\n      gamesPlayed: playerStats.gamesPlayed.toString(),\n      stats: [\n        {\n          stat: playerStats.pointsPerGame.toFixed(3),\n          label: \"PPG\",\n        },\n        {\n          stat: playerStats.assistsPerGame.toFixed(3),\n          label: \"APG\",\n        },\n        {\n          stat: playerStats.reboundsPerGame.toFixed(3),\n          label: \"RPG\",\n        },\n        {\n          stat: playerStats.fieldGoalPercentage.toFixed(3),\n          volume:{\n            made: playerStats.fieldGoalsMade.toString(),\n            attempted: playerStats.fieldGoalsAttempted.toString()\n          },\n          label: \"FG%\",\n        },\n        {\n          stat: playerStats.threePointPercentage.toFixed(3),\n          label: \"3PT%\",\n          volume: {\n            made: playerStats.threePointsMade.toString(),\n            attempted: playerStats.threePointsAttempted.toString()\n          }\n        },\n        {\n          stat: playerStats.freeThrowPercentage.toFixed(3),\n          label: \"FT%\",\n          volume: {\n            made: playerStats.freeThrowsMade.toString(),\n            attempted: playerStats.freeThrowsAttempted.toString()\n          }\n        },\n        {\n          stat: playerStats.stealsPerGame.toFixed(3),\n          label: \"SPG\",\n        },\n        {\n          stat: playerStats.blocksPerGame.toFixed(3),\n          label: \"BPG\",\n        },\n        {\n          stat: playerStats.turnoversPerGame.toFixed(3),\n          label: \"TOV\",\n        },\n      ] \n    }\n  }\n\n  const seasons: LeagueSeasons[] = [\n    {\n      seasonId: 1,\n      label: \"Season 1\",\n    },\n    {\n      seasonId: 2,\n      label: \"Current Season\",\n      currentSeason: true\n    },\n    {\n      seasonId: undefined,\n      label: \"Total\"\n    }\n  ]\n  \n  export const PlayerStatsSection = (({ playerId }: Props) => {\n    \n    function changeSeason(season: LeagueSeasons){\n      setSeason(season);\n    }\n    \n    if (!playerId){\n      return null;\n    }\n\n    const [currentSeason, setSeason] = useState<LeagueSeasons>( {\n      seasonId: undefined,\n      label: \"Total\"\n    });\n\n    const playerStats = formatStats(playerId, currentSeason);\n\n    const firstRow = playerStats.stats.filter(stats => stats.label === \"APG\" || stats.label === \"PPG\" || stats.label === \"RPG\");\n    const secondRow = playerStats.stats.filter(stats => stats.label === \"FG%\" || stats.label === \"3PT%\" || stats.label === \"FT%\");\n    const thirdRow = playerStats.stats.filter(stats => stats.label === \"SPG\" || stats.label === \"BPG\" || stats.label === \"TOV\");\n    const rows = [firstRow, secondRow, thirdRow];\n    \n    return (  \n      <>\n        <Jumbotron>\n          <h1>#{playerStats.number}. {playerStats.name}</h1> \n          <div>Games played: {playerStats.gamesPlayed}</div>\n          <div>\n            <DropdownButton id=\"dropdown-basic-button\" title={currentSeason.label}>\n              {seasons.map(season => \n                <Dropdown.Item \n                  onClick={() => changeSeason(season)} \n                  key={season.label}>\n                    {season.label}\n                </Dropdown.Item>\n              )}\n            </DropdownButton>\n          </div>\n        </Jumbotron>\n        <Container>\n          {rows && rows.map((rows, index) => (\n            <div key={index} className=\"player-score\">\n            <Row>\n              {rows && rows.map(stat => (\n                <Col key={stat.label}>\n                  <h2>{stat.stat}</h2>\n                  {stat.volume && <h5>({stat.volume.made}/{stat.volume.attempted})</h5>}\n                  {stat.label}\n                </Col>\n              ))}\n            </Row>\n            </div>\n          ))}\n        </Container>\n      </>     \n    );\n});\n","import React, { Component } from 'react';\n// import './BBallSeason.css';\nimport * as bballData from '../models/data.json';\nimport { BBallSeasonMatches } from './BBallSeasonMatches';\nimport { parseBBallData } from '../services/BBallDataRetriever';\nimport { Router } from '@reach/router';\nimport { BBallMatchPanel } from './BBallMatchPanel';\nimport { PlayerStatsSection } from './PlayerStatsSection';\nimport { MatchVideo } from './MatchVideo';\n\ninterface RouteProps {\n  path: string;\n  matchId?: string;\n  playerId?: string;\n}\n\nconst BBallSeason = ({path} : RouteProps) => {\n  const matches = parseBBallData(bballData);\n  return(\n    <BBallSeasonMatches seasonMatches={matches} />\n  );\n}\n\nconst BBallMatchPanelRoute = ({path, matchId}: RouteProps) => {\n  return <BBallMatchPanel matchId={matchId}/>\n}\n\nconst PlayerStatsRoute = ({path, playerId}: RouteProps) => {\n  return <PlayerStatsSection playerId={playerId} />\n}\n\nconst  MatchVideoRoute = ({path, matchId}: RouteProps) => {\n  return <MatchVideo matchId={matchId} />\n}\n\nconst App = () => (\n  <Router basepath=\"/bballfrontend\">\n    <BBallSeason path=\"/\" />\n    <BBallMatchPanelRoute path=\"/match/:matchId\" />\n    <PlayerStatsRoute path=\"/player/:playerId\" />\n    {/* <MatchVideoRoute path=\"/video/:matchId\" /> */}\n  </Router>\n);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}